# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nUeBFJupMi6xMMTn-s8bs5n1tbJwFD56
"""

import heapq

class Graph:
    def __init__(self):
        self.graph = {
            'S': {'A': 3, 'B': 2},
            'A': {'D': 5, 'S': 3},
            'B': {'C': 3, 'S': 2},
            'C': {'G': 4, 'B': 3},
            'D': {'G': 3, 'A': 5},
            'G': {}
        }
        self.heuristic = {'S': 6, 'A': 4, 'B': 3, 'C': 3, 'D': 1, 'G': 0}

    def greedy_best_first_search(self, start, goal):
        open_list = [(self.heuristic[start], start)]
        came_from = {}
        visited = set()

        while open_list:
            _, current = heapq.heappop(open_list)

            if current in visited:
                continue
            visited.add(current)

            if current == goal:
                return self.reconstruct_path(came_from, start, goal)

            for neighbor in self.graph[current]:
                if neighbor not in visited:
                    heapq.heappush(open_list, (self.heuristic[neighbor], neighbor))
                    came_from[neighbor] = current
        return None

    def a_star_search(self, start, goal):
        open_list = [(self.heuristic[start], start)]
        g_score = {node: float('inf') for node in self.graph}
        g_score[start] = 0
        came_from = {}

        while open_list:
            _, current = heapq.heappop(open_list)

            if current == goal:
                return self.reconstruct_path(came_from, start, goal)

            for neighbor, cost in self.graph[current].items():
                temp_g_score = g_score[current] + cost

                if temp_g_score < g_score[neighbor]:
                    g_score[neighbor] = temp_g_score
                    f_score = temp_g_score + self.heuristic[neighbor]
                    heapq.heappush(open_list, (f_score, neighbor))
                    came_from[neighbor] = current
        return None

    def reconstruct_path(self, came_from, start, goal):
        path = []
        current = goal
        while current != start:
            path.append(current)
            current = came_from.get(current, start)
        path.append(start)
        path.reverse()
        return path

# Contoh Penggunaan
graph = Graph()
print("Greedy Best First Search:", graph.greedy_best_first_search('S', 'G'))
print("A* Search:", graph.a_star_search('S', 'G'))