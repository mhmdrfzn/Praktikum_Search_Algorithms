{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPrF/vHNYReVmmmM7QI1ypy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iyf8tDHc0_ge","executionInfo":{"status":"ok","timestamp":1741790949580,"user_tz":-420,"elapsed":96,"user":{"displayName":"Mochamad Risyad Fauzan","userId":"10143685887636129384"}},"outputId":"0ceaa2a5-86f8-4444-8bf9-6a339c0c1477"},"outputs":[{"output_type":"stream","name":"stdout","text":["Simpul tujuan ditemukan!\n","Jalur yang ditemukan: S → A → C → G\n","Total biaya jalur: 10\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":1}],"source":["from queue import PriorityQueue\n","\n","def a_star_search(graph, start, goal, heuristic):\n","    frontier = PriorityQueue()\n","    frontier.put((0, start))  # (total cost f(n), node)\n","\n","    came_from = {}  # Menyimpan jalur terpendek\n","    cost_so_far = {start: 0}  # Menyimpan biaya g(n)\n","\n","    while not frontier.empty():\n","        current_cost, current_node = frontier.get()  # Ambil node dengan biaya terendah\n","\n","        if current_node == goal:\n","            # Rekonstruksi jalur dari goal ke start\n","            path = []\n","            while current_node:\n","                path.append(current_node)\n","                current_node = came_from.get(current_node, None)\n","            path.reverse()\n","\n","            print(\"Simpul tujuan ditemukan!\")\n","            print(\"Jalur yang ditemukan:\", \" → \".join(path))\n","            print(\"Total biaya jalur:\", cost_so_far[goal])\n","            return True\n","\n","        for neighbor, step_cost in graph[current_node].items():\n","            new_cost = cost_so_far[current_node] + step_cost  # g(n) + biaya langkah\n","\n","            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:\n","                cost_so_far[neighbor] = new_cost\n","                priority = new_cost + heuristic[neighbor]  # f(n) = g(n) + h(n)\n","                frontier.put((priority, neighbor))\n","                came_from[neighbor] = current_node  # Simpan jalur\n","\n","    print(\"Simpul tujuan tidak ditemukan!\")\n","    return False\n","\n","# Heuristik (h(n))\n","heuristic = {\n","    'A': 9,\n","    'B': 4,\n","    'C': 2,\n","    'D': 5,\n","    'E': 3,\n","    'S': 7,\n","    'G': 0\n","}\n","\n","# Graph dengan biaya antar simpul (g(n))\n","graph = {\n","    'S': {'A': 3, 'E': 2},\n","    'A': {'B': 3, 'C': 4},\n","    'B': {'D': 5},\n","    'C': {'G': 3},\n","    'D': {'G': 3},\n","    'E': {'D': 6}\n","}\n","\n","start_node = 'S'\n","goal_node = 'G'\n","\n","a_star_search(graph, start_node, goal_node, heuristic)"]}]}